<?xml version="1.0" encoding="utf-8"?>
<search>



  <entry>
    <title>线程池</title>
    <link href="/2022/05/01/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2022/05/01/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>

    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一般情况下，客户端传入任务，需要服务端快速处理并返回结果。如果服务端每接受到一个任务，就创建一个线程，这种方式将会创建数以万记的线程。使操作系统频繁的进行线程上下文切换，无故增加系统负载，而线程的创建和消亡都是需要耗费系统资源，也无疑浪费了系统资源。<br>线程池能很好地解决这个问题，它预先创建了若干数量的线程，并且不由用户直接对线程的创建进行控制，在此前提下重复使用固定或较为固定数目的线程来完成任务的执行。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>提高线程复用能力</li><li>消除了频繁创建和销毁线程的系统资源开销</li><li>避免创建过多的线程耗尽进程内存空间，同时减少线程上下文切换次数</li><li>充分利用CPU多核资源，最大限度的利用多核提升应用程序性能</li></ul><h2 id="java线程池详解"><a href="#java线程池详解" class="headerlink" title="java线程池详解"></a>java线程池详解</h2><p>java5中增加了内置线程池实现ThreadPoolExecutor，构造方法如下</p><figure class="highlight aspectj"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">int</span> corePoolSize,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">int</span> maximumPoolSize,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">long</span> keepAliveTime,</span></span><br><span class="hljs-params"><span class="hljs-function">      TimeUnit unit,</span></span><br><span class="hljs-params"><span class="hljs-function">      BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="hljs-params"><span class="hljs-function">      ThreadFactory threadFactory,</span></span><br><span class="hljs-params"><span class="hljs-function">      RejectedExecutionHandler <span class="hljs-keyword">handler</span>)</span> </span>&#123;<br>      <span class="hljs-comment">// 。。。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>corePoolSize: 最大核心线程数</li><li>maximumPoolSize: 最大线程数</li><li>keepAliveTime: 非核心线程空闲存活时间</li><li>unit: 空闲存活时间单位</li><li>workQueue: 存放任务的阻塞队列</li><li>threadFactory: 创建新线程的工厂，所有线程都通过该工厂创建，有默认实现。可自定义线程名字，但是默认线程名称格式为**pool-&lt;线程池编号&gt;-thread-&lt;线程编号&gt;**，这对于监控和日志输出并不明显，所以最好自定义线程名（见参考资料2）</li><li>handler: 拒绝执行任务策略</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>创建完ThreadPoolExecutor，当有任务提交时，使用execute或submit方法来执行相关线程池操作</p><p>执行流程图如下</p><p><img src="/img/threadpool/FDE05A3DF247E9795B312677C58A5CC9.jpg" alt="线程池执行流程"></p><ol><li>如果线程池中存活的核心线程数小于最大核心线程数corePoolSize，线程池创建一个核心线程去处理提交的任务</li><li>如果线程池中核心线程数已满，即线程数已等于corePoolSize，当有一个新提交的任务时，会被放进任务队列workQueue排队等待执行</li><li>当线程池里面存活的线程数已等于corePoolSize,且任务队列workQueue也满，判断线程数是否达到maximumPoolSize，即判断最大线程数是否已满，如果没满，创建一个非核心线程执行提交的任务</li><li>如果当前线程数达到了maximumPoolSize，还有新的任务要执行，直接采用拒绝策略处理</li></ol><h4 id="execute与submit的区别"><a href="#execute与submit的区别" class="headerlink" title="execute与submit的区别"></a>execute与submit的区别</h4><ul><li>execute适用于不需要关注返回值的场景</li><li>submit方法适用于需要关注返回值的场景</li></ul><p>下面有几个注意点，非常重要，无论你是面试官还是候选人都必须很清楚下列这些概念和原理</p><h3 id="线程池类型"><a href="#线程池类型" class="headerlink" title="线程池类型"></a>线程池类型</h3><p>可通过自定义ThreadPoolExecutor或用jdk内置的Executors来创建一系列的线程池（不推荐使用内置的Executors创建，建议自定义ThreadPoolExecutor，后面会详细说明这一点）</p><ul><li>newFixedThreadPool<br>创建固定线程数量的线程池，用于已知并发压力情况下，对线程数做限制的场景，比较适合执行时间长的任务</li><li>newSingleThreadExecutor<br>创建只有一个线程的线程池，用于需要保证顺序执行的场景，并只有一个线程在执行，比较适合一个任务接一个任务执行的场景</li><li>newCachedThreadPool<br>创建线程数量会自动扩容, 自动销毁的线程池。可无限扩大，比较适合处理执行时间较短的任务</li><li>newScheduledThreadPool<br>创建支持定时任务的线程池。可延时启动，定时启动，用于需要多个后台线程执行周期任务的场景</li><li>newWorkStealingPool<br>Java8开始才有的，内部会构建ForkJoinPool并行处理任务，不保证处理顺序。拥有多个任务队列，可减少连接数，创建当前可用cpu数量的线程来并行执行。适合使用在很耗时的任务中</li></ul><p>相应的源码实现在Executors类中</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-keyword">new</span><span class="hljs-type">FixedThreadPool</span>(int nThreads) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ThreadPoolExecutor</span>(nThreads, nThreads, <span class="hljs-number">0</span>L, TimeUnit.MILLISECONDS, <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br>     <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-keyword">new</span><span class="hljs-type">SingleThreadExecutor</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Executors</span>.FinalizableDelegatedExecutorService(<span class="hljs-keyword">new</span> <span class="hljs-type">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>L, TimeUnit.MILLISECONDS, <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-keyword">new</span><span class="hljs-type">CachedThreadPool</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE, <span class="hljs-number">60</span>L, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-type">SynchronousQueue</span>&lt;Runnable&gt;());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ScheduledExecutorService <span class="hljs-keyword">new</span><span class="hljs-type">ScheduledThreadPool</span>(int corePoolSize) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ScheduledThreadPoolExecutor</span>(corePoolSize);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-keyword">new</span><span class="hljs-type">WorkStealingPool</span>(int parallelism) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ForkJoinPool</span>(parallelism,<br>    ForkJoinPool.defaultForkJoinWorkerThreadFactory,<br>    <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>ScheduledThreadPoolExecutor类</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>(corePoolSize, Integer.MAX_VALUE,<br>              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<br>              <span class="hljs-keyword">new</span> DelayedWorkQueue());<br>&#125;<br></code></pre></td></tr></table></figure><p>ForkJoinPool类</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ForkJoinPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> parallelism,</span></span><br><span class="hljs-params"><span class="hljs-function">       ForkJoinWorkerThreadFactory factory,</span></span><br><span class="hljs-params"><span class="hljs-function">       UncaughtExceptionHandler <span class="hljs-keyword">handler</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">boolean</span> asyncMode)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(parallelism, factory, <span class="hljs-keyword">handler</span>, asyncMode,<span class="hljs-number">0</span>, MAX_CAP, <span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, DEFAULT_KEEPALIVE, TimeUnit.MILLISECONDS);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="为啥不建议使用Executors创建线程池"><a href="#为啥不建议使用Executors创建线程池" class="headerlink" title="为啥不建议使用Executors创建线程池"></a>为啥不建议使用Executors创建线程池</h4><p>弊端如下</p><ul><li>FixedThreadPool和SingleThreadExecutor<br>看上述源码，使用的队列为LinkedBlockingQueue，该队列允许的队列最大长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM</li><li>CachedThreadPool和ScheduledThreadPool<br>还是看上述源码，允许创建的线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM</li></ul><p>所以在有大量请求的线程池场景中, 更推荐自定义ThreadPoolExecutor来创建线程池</p><h3 id="核心线程"><a href="#核心线程" class="headerlink" title="核心线程"></a>核心线程</h3><p>默认情况</p><ul><li>核心线程不会预先创建，只有在有任务时才会创建。</li><li>核心线程不会因为空闲而被终止，keepAliveTime参数不适用于它</li></ul><p>但是ThreadPoolExecutor类中有如下方法，可以改变这些默认情况</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//预先创建所有核心线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> prestartAllCoreThreads()<br><span class="hljs-comment">//创建一个核心线程，若所有核心线程都已创建，则返回false</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span>ean prestartCoreThread()<br><span class="hljs-comment">//方法参数设定为true，则keepAliveTime参数也适用于核心线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> allowCoreThreadTimeOut(<span class="hljs-built_in">bool</span>ean value)<br></code></pre></td></tr></table></figure><h3 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h3><p>非核心线程执行任务完毕，并不是马上被销毁，而是等待一段时间，再被销毁<br>目的有两方面</p><ul><li>如果执行任务完毕，线程不被销毁，也没有keepAliveTime，那么此线程会永远堆积在线程池中，一旦这样的线程数量达到maximumPoolSize上限，这样任务队列workQueue中正在排队等待的任务永远不会进入线程池被执行，而是会被拒绝策略直接处理掉。所以要及时销毁，让线程池中的线程数不会达到maximumPoolSize，方便任务队列workQueue中正在排队等待的任务进线程池，被新创建的非核心线程执行，而不是让这些正在等待的任务被拒绝策略处理</li><li>见前述，线程池目的是减少频繁创建和销毁线程开销。空闲等待的线程如果还没到keepAliveTime，此时任务队列workQueue中正在排队等待的任务可以进入线程池被此线程执行，这样就最大化利用已有线程进行任务操作。如果马上销毁，任务进线程池后还需要重新创建一个非核心线程执行提交的任务，增加了创建和销毁线程开销。任务队列workQueue中如果没有正在排队等待的任务，则在达到keepAliveTime后，马上被销毁</li></ul><h3 id="常见任务队列workQueue"><a href="#常见任务队列workQueue" class="headerlink" title="常见任务队列workQueue"></a>常见任务队列workQueue</h3><p>先描述”线程池类型”源码中出现的几个队列</p><ul><li><p>LinkedBlockingQueue<br>可设置容量队列，基于链表结构的阻塞队列，按FIFO排序，容量可自行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE。默认无界。newFixedThreadPool线程池使用此队列</p></li><li><p>SynchronousQueue<br>一个不存储元素，没有实际存储空间的同步阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene。newCachedThreadPool线程池使用此队列</p></li><li><p>DelayedWorkQueue<br>延迟队列，是一个任务定时周期的延迟执行队列。根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。newScheduledThreadPool线程池使用此队列</p></li></ul><p>ThreadPoolExecutor还支持自定义队列来实现，主要会用到下面这两个</p><ul><li>ArrayBlockingQueue<br>有界队列，是一个用数组实现的有界阻塞队列，按FIFO排序量</li><li>PriorityBlockingQueue<br>优先级队列，是具有优先级的，基于堆的无界阻塞队列</li></ul><p><strong>注意: 由前文“为啥不建议使用Executors创建线程池”可知，无界队列允许的队列最大长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM，因此不建议自定义队列使用无界队列，怕没设置队列长度引发OOM。<br>这也是不建议使用Executors的最重要原因</strong></p><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p>JDK内置4种线程池拒绝策略，但是最好还是自定义拒绝策略</p><ol><li>CallerRunsPolicy（调用者运行策略）</li></ol><ul><li>概念<br>只要线程池没有关闭，就由提交任务的当前线程处理。</li><li>使用场景<br>一般在不允许失败、对性能要求不高、并发量较小的场景下使用，因为线程池一般情况下不会关闭，也就是提交的任务一定会被运行，但由于是调用者线程自己执行，当多次提交任务时，就会阻塞后续任务执行，性能和效率自然就低了</li></ul><ol start="2"><li>AbortPolicy（中止策略）</li></ol><ul><li>概念<br>直接抛出拒绝执行的异常，意思也就是打断当前执行流程</li><li>使用场景<br>没有特殊场景，但要正确处理抛出的异常<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">ThreadPoolExecutor中默认的策略就是AbortPolicy<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>DiscardPolicy（丢弃策略）</li></ol><ul><li>概念<br>直接丢弃任务，不触发任何动作</li><li>使用场景<br>没有。如果提交的任务无关紧要，可以使用这个策略。毫无声息的丢弃任务。但是基本上提交的任务都是有用的，所以这个策略基本不会被用到</li></ul><ol start="4"><li>DiscardOldestPolicy（丢弃最老策略）</li></ol><ul><li>概念<br>如果线程池未关闭，就弹出任务队列workQueue头部的任务元素，然后尝试执行</li><li>使用场景<br>这个策略也会丢弃任务，而且也是毫无声息的丢弃任务，但特点是丢弃的是任务是排队等待的任务中最老的那个任务，而且会等待执行优先级较高的任务</li></ul><ol start="5"><li>自定义拒绝策略<br>实现RejectedExecutionHandler接口，编写自定义的RejectHandler 。来实现自己的拒绝策略</li></ol><h4 id="建议自定义拒绝策略原因"><a href="#建议自定义拒绝策略原因" class="headerlink" title="建议自定义拒绝策略原因"></a>建议自定义拒绝策略原因</h4><ol><li>使用默认AbortPolicy时，抛出的拒绝执行的异常是RejectedExecutionException。这是个运行时异常，对于运行时异常编译器并不强制catch它，所以<strong>默认拒绝策略要慎重使用</strong>。所以在线程池处理的任务非常重要时，建议自定义拒绝策略</li><li>执行execute方法时，如果任务在执行过程中出现运行时异常，会导致当前执行任务的线程自动终止；但最致命的是任务虽然异常了，但是却获取不到任何通知，这会让人误以为任务都执行正常。虽然线程池提供了很多用于异常处理的方法，但是最稳妥和简单的方案还是捕获所有异常并按需处理。详见《Java 并发编程实战》7.3节“处理非正常的线程终止”，详细介绍了异常处理的方案</li></ol><h3 id="线程池关闭"><a href="#线程池关闭" class="headerlink" title="线程池关闭"></a>线程池关闭</h3><p>调用shutdownNow和shutdown两个方法来实现</p><ul><li>shutdownNow<br>对正在执行的任务全部发出interrupt()，停止执行，对还未开始执行的任务全部取消，并且返回还没开始的任务列表</li><li>shutdown<br>调用shutdown后，线程池将不再接受新的任务，但也不会去强制终止已经提交或者正在执行中的任务</li></ul><p>关闭线程池之后，可用isTerminated来判断所有的线程是否执行完成，千万不要用isShutdown，isShutdown只是返回是否调用过shutdown的结果</p><h2 id="线程池大小选择策略"><a href="#线程池大小选择策略" class="headerlink" title="线程池大小选择策略"></a>线程池大小选择策略</h2><p>线程池大小不合适，太多或太少，都会导致麻烦，需要去考虑一个合适的线程池大小。</p><p>一般思路</p><ul><li><p>CPU密集型<br>如果任务主要是进行计算，那就意味着CPU的处理能力是稀缺的资源，不能通过大量增加线程数提高计算能力，因为如果线程太多，反而会导致大量的上下文切换开销。所以，通常建议线程池大小按照CPU核的数目N或者N+1设置</p></li><li><p>IO密集型<br>如果是需要较多等待的任务，比如I&#x2F;O操作较多，可考虑的计算方法</p><p><strong>线程数 &#x3D; CPU核数 × 目标CPU利用率 ×（1 + 平均等待时间&#x2F;平均工作时间）</strong></p></li></ul><p>但是这些都不是精准预计，需要根据测试或者分析进行计算，在实际中验证和调整</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://mp.weixin.qq.com/s/nb8V_RXC8bklAviEsR4cjw">Java线程池必知的8大拒绝策略</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/PmfP3r2VhJ7AzQzC7owZnQ">创建线程以及线程池时候要指定与业务相关的名字，以便于追溯问题</a></p></li></ol>    <div id="aplayer-HQzBzAdu" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1900008755" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>


    <categories>

      <category>并发编程</category>

    </categories>


    <tags>

      <tag>线程池</tag>

    </tags>

  </entry>



  <entry>
    <title>线程</title>
    <link href="/2022/05/01/%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/05/01/%E7%BA%BF%E7%A8%8B/</url>

    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><ul><li><p>进程（Process）<br>机器内存中运行的应用程序，应用程序启动后系统会分配一块内存空间给这个进程，进程与进程间相互独立，即内存不共享。一个进程允许启动N个线程，例如Windows系统中一个后缀是.exe 程序就是一个进程。进程是系统资源分配的基本单位</p></li><li><p>线程（Thread）<br>进程中的某个执行流程，一个进程允许启动N个线程，例如java进程中可以运行N个线程。进程和线程的关系是一对多，线程与线程之间共享进程的内存。线程是调度器（即 CPU）调度的基本单位</p></li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>进程是资源分配的最小单位，线程是程序执行的最小单位</li><li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此 CPU<br>切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多</li><li>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC）进行。但是如何处理好同步与互斥是编写多线程程序的难点</li><li>多进程程序更健壮，多线程程序只要一个线程死掉，整个进程虽然不会死掉，但是功能会受影响，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间</li></ul><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><ul><li><p>并发<br>当我们的计算机硬件资源只有一个CPU也就是处理器时，执行多个线程时实际上是将多个线程按时间段进行分割，每个时间段执行一个线程。比如上午10点56分执行线程一，10点58分执行线程二，这样的执行方式就是并发</p></li><li><p>并行<br>并行就完全相反，它是计算机有两个或两个以上CPU时，执行多线程时，cpu1执行线程1、cpu2执行线程2，这样的执行就是并行的方式。</p></li></ul><p>由上两个概念解析可知，并发是多个线程执行时没有时间上的重叠，而并行是可以有时间上的重叠</p><p>打个比方<br><b><br>你吃饭吃到一半，电话来了，你放下筷子接了电话，接完后继续拿起筷子吃饭，这就是并发<br>你吃饭吃到一半，电话来了，你边打电话边吃饭，这就是并行<br></b></p><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><p>目前已知应该一共4种方式</p><h3 id="1-继承Thread类重写run方法"><a href="#1-继承Thread类重写run方法" class="headerlink" title="1.继承Thread类重写run方法"></a>1.继承Thread类重写run方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadExample</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>    <span class="hljs-keyword">new</span> MyThread().start();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyThread类继承Thread类，重写run方法，然后调用start方法启动线程，当创建完thread对象后该线程并没有被启动执行.</p><p>调用了start方法后才是真正启动了线程。其实当调用start方法时，线程是处于就绪状态，就绪状态是表明该线程已获取了除CPU资源外的其它资源，等获取CPU资源后才会真正处于运行状态</p><p>run方法执行完，线程就处于终止状态。</p><ul><li>优点<br>run方法内获取当前线程直接使用this就行了，无须使用Thread.currentThread()方法</li><li>缺点<br>Java不支持多继承，如果继承了Thread类，就不能再继承其它类，另外任务与代码没有分离，当多个线程执行一样的任务时候需要多份任务代码，而Runable没有这个限制。而且任务没有返回值</li></ul><p><strong>注意: 线程执行顺序与创建顺序无关</strong></p><h3 id="2-实现Runnable接口的run方法"><a href="#2-实现Runnable接口的run方法" class="headerlink" title="2.实现Runnable接口的run方法"></a>2.实现Runnable接口的run方法</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadExample</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>    RunnableTask task = <span class="hljs-keyword">new</span> <span class="hljs-type">RunnableTask</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(task).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(task).start();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunnableTask</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Runnable</span></span> </span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> void run() &#123;<br>      System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个线程公用同一个task代码逻辑。RunableTask还可以添加参数进行任务区分</p><ul><li>优点<br>RunableTask可继承其他类</li><li>缺点<br>任务没有返回值</li></ul><h3 id="3-实现Callable接口使用FutureTask"><a href="#3-实现Callable接口使用FutureTask" class="headerlink" title="3.实现Callable接口使用FutureTask"></a>3.实现Callable接口使用FutureTask</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadExample</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws InterruptedException &#123;<br>    <span class="hljs-comment">// 创建异步任务</span><br>    FutureTask&lt;<span class="hljs-keyword">String</span>&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-type">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-type">CallerTask</span>());<br>    <span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(futureTask).start();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 等待任务执行完毕，并返回结果</span><br>      System.out.println(futureTask.<span class="hljs-keyword">get</span>());<br>    &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallerTask</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Callable</span></span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> call() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world!&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点<br>有返回值</li><li>缺点<br>futureTask.get()是一个阻塞方法。要想不阻塞，只能在futureTask.get()代码之前，加上下列代码</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(!futureTask.isDone()</span></span>)&#123;<br>    <span class="hljs-comment">//检查是否完成，如果没完成，那可以让主线程去做其他操作，不会被阻塞</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-使用线程池"><a href="#4-使用线程池" class="headerlink" title="4.使用线程池"></a>4.使用线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadExample</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ThreadPoolTask threadPoolTask = <span class="hljs-keyword">new</span> ThreadPoolTask();<br>    ExecutorService fixedThreadPool =<br>        <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>            <span class="hljs-number">5</span>,<br>            <span class="hljs-number">10</span>,<br>            <span class="hljs-number">0L</span>,<br>            TimeUnit.MILLISECONDS,<br>            <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="hljs-number">1024</span>));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>      fixedThreadPool.execute(threadPoolTask);<br>    &#125;<br>    fixedThreadPool.shutdown();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;线程名：&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;\nhello world!&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于线程池的说明可见线程池篇，相关的注意措施都已在那篇说明</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>线程在代码中执行时，会根据具体操作步骤时刻变化自己的状态。整个线程执行过程就是它的生命周期</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>线程状态一共有7种状态，但是分为6大类，详见Thread类中的内部枚举类State</p><p>源码(java11)如下:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">public enum State &#123;<br><span class="hljs-built_in">       NEW,</span><br><span class="hljs-built_in">       RUNNABLE,</span><br><span class="hljs-built_in">       BLOCKED,</span><br><span class="hljs-built_in">       WAITING,</span><br><span class="hljs-built_in">       TIMED_WAITING,</span><br>       TERMINATED<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如下列表对这些状态进行说明</p><table><thead><tr><th align="left">线程状态分类</th><th align="left">简单说明</th></tr></thead><tbody><tr><td align="left">NEW</td><td align="left">前述线程创建方式中已说明，线程创建完就处于此状态，只有调用start方法才会到下一状态</td></tr><tr><td align="left">RUNNABLE</td><td align="left">运行状态其实包含running和ready两个状态</td></tr><tr><td align="left">BLOCKED</td><td align="left">线程被锁（之后会详细说明锁相关知识）阻塞</td></tr><tr><td align="left">WAITING</td><td align="left">线程处于此状态时候，还需要其他状态对它进行通知或中断等操作，否则会一直处于这个等待状态</td></tr><tr><td align="left">TIME_WAITING</td><td align="left">和上列不同之处在于它有时间限制，当在指定时间过后还没等到其他线程通知或中断等操作，就不等了，直接返回</td></tr><tr><td align="left">TERMINATED</td><td align="left">线程执行结束后状态</td></tr></tbody></table><p>如果有过线上调优经验，在导出的dump文件里会发现每个线程都有这些线程状态说明，从而方便我们定位线上系统性能问题发生的具体原因</p><h4 id="为啥running和ready两个状态可以合并成runnable状态？"><a href="#为啥running和ready两个状态可以合并成runnable状态？" class="headerlink" title="为啥running和ready两个状态可以合并成runnable状态？"></a>为啥running和ready两个状态可以合并成runnable状态？</h4><p>之前线程创建方式中已说明: 就绪状态(ready)是表明该线程已获取了除CPU资源外的其它资源,获取CPU资源后才会真正处于运行状态(running)<br>。在JVM层面，它隐藏了这两个状态，只能看到runnable状态（其实部分wating状态也被隐藏了）</p><p>示意图如下</p><p><img src="/img/thread/EB20E11803B109A5EAC207E8F172B405.jpg" alt="状态合并了"></p><p>这样做的原因是因为</p><ul><li>操作系统的线程状态是围绕着cpu这一核心与JVM侧重点不同</li><li>JVM线程状态的改变通常只与<strong>自身显式引入机制</strong>有关，就是说线程状态的改变，通常是自身机制引发<br>比如后面要说的synchronize让线程进入BLOCKED状态，sleep，wait等方法则让它进入WATING状态</li></ul><h3 id="生命周期过程"><a href="#生命周期过程" class="headerlink" title="生命周期过程"></a>生命周期过程</h3><p>见下图，该图参考了参考书单2的4.1.4小节（个人认为状态描述正确，但是触发状态变化的方法持保留意见）</p><p><img src="/img/thread/31DBCCB46DD640361030DEEB1B62B1A1.jpg" alt="线程生命周期过程"></p><ol><li>创建好线程，它处于NEW状态</li><li>调用start方法后，开始运行，进入READY状态。当获取cpu资源后，处于RUNNING状态。统称为RUNNABLE状态</li><li>执行wait方法后，进入WAITING转态。前述列表中已说，其他线程通知或中断操作后，它才能返回到RUNNABLE状态</li><li>如果执行wait（long）或sleep（long）等带超时时间参数的方法后，线程进入TIMED_WAITING状态。超时时间一过就不等了，直接返回到RUNNABLE状态</li><li>线程调用同步方法，在获取不到锁时，会进入到BLOCKED状态（锁知识会在之后详细说明）</li><li>执行run或interrupt方法后，就进入TERMINATED状态。整个线程执行完毕，生命周期终结</li></ol><p><strong>注意: 如图所示，状态变化不一定就执行上述这些方法，还可以执行图中展示的其他方法</strong></p><h3 id="触发线程状态变化的方法说明"><a href="#触发线程状态变化的方法说明" class="headerlink" title="触发线程状态变化的方法说明"></a>触发线程状态变化的方法说明</h3><h4 id="Thread类方法"><a href="#Thread类方法" class="headerlink" title="Thread类方法"></a>Thread类方法</h4><ul><li>Thread.start()<br>其实已经写了很多遍了，通过这个方法线程开始进入RUNNABLE状态</li><li>Thread.yield()<br>线程获取的cpu资源用完之后，调用此方法从RUNNING状态切换为READY状态。所以上图中也称为<strong>系统调度</strong></li><li>Thread.sleep(long)<br>static方法，线程类和线程实例调用，效果一样</li><li>Thread.join()和Thread.join(long)<br>让父线程等待子线程结束之后才继续运行。其实是调用join方法的线程（父线程）进入TIMED_WAITING状态，等待join方法所属的线程（子线程）结束后再继续运行</li><li>Thread.run()<br>执行操作，完毕后线程操作结束</li><li>Thread.interrupt()<br>将线程的中断标志位设置为true，并没有中断线程，它只是向线程发送一个中断信号</li><li>Thread.isInterrupted()<br>判断线程是否中断，不改变标志位</li><li>Thread.interrupted()<br>判断当前线程是否中断，如果是true，表明线程已中断，返回true，返回前将标志位设置为false</li></ul><p>其他方法</p><ul><li>Thread.currentThread()<br>获取当前线程</li><li>Thread.isAlive()<br>某个线程实例是否存活</li></ul><h4 id="Object类方法"><a href="#Object类方法" class="headerlink" title="Object类方法"></a>Object类方法</h4><ul><li>Object.wait()和Object.wait(long)<br>把持有对象线程的控制权交出去，然后处于等待状态,wait()是转换为WAITING状态，wait(long)是转换为TIMED_WAITING状态</li><li>Object.notify()<br>通知某个正在等待对象控制权的线程可以继续运行</li><li>Object.nofifyAll()<br>通知所有等待这个对象控制权的线程继续运行，如果有多个正在等待该对象控制权的线程时，具体唤醒哪个线程由操作系统进行调度</li></ul><h5 id="为什么wait和notify、notifyAll是Object类的方法而不是Thread类？"><a href="#为什么wait和notify、notifyAll是Object类的方法而不是Thread类？" class="headerlink" title="为什么wait和notify、notifyAll是Object类的方法而不是Thread类？"></a>为什么wait和notify、notifyAll是Object类的方法而不是Thread类？</h5><p>wait和notify、notifyAll这几个方法都会涉及到并发编程中的锁机制。因为锁是每个对象都具备的特性，因此操作锁的方法必然和对象有关，Object类是java里所有对象基类，因此这些方法是Object类方法，而不是Thread类特有的。</p><p>说穿了，它们都和对象的监视器锁有关。也就是前述的对象控制权。它们几个在被执行时，都必须保证当前运行的线程取得了对象控制权（监视器锁）。wait一般是挂起自己，释放对象的监视器锁，让其他线程可以获得，还把自己加入等待对象控制权的线程中，直到其他线程调用了Object的notify、notifyAll方法，自身才会被唤醒（如果是调用wait（long）方法就是加了等待时间），而notify、notifyAll是在释放监视器锁同时，唤醒正在等待对象控制权的线程。如果调用的是notify，则哪个线程取得对象控制权是随机不确定的，如果是notifyAll，则是所有等待对象控制权的线程一起被唤醒，哪个线程取得对象控制权要看操作系统的调度</p><p>后续章节会对java的锁机制进行进一步的说明</p><h4 id="LockSupport类方法"><a href="#LockSupport类方法" class="headerlink" title="LockSupport类方法"></a>LockSupport类方法</h4><p>LockSupport类是一个线程阻塞工具类，所有方法都是静态方法，可以让线程在任意位置阻塞，当然阻塞之后肯定会有唤醒</p><ul><li>LockSupport.park()<br>使当前线程挂起，进入线程WAITING状态，且操作系统不再会对它进行调度，直到其他线程调用了unpark方法<br>park不同于Thread.yield(), yield只是告诉操作系统可以先让其他线程运行，但自己依然是可运行状态，而park会放弃调度资格，使线程进入WAITING状态</li><li>LockSupport.unpark(Thread)<br>使参数传入的线程恢复成RUNNABLE状态，解除阻塞方法</li><li>LockSupport.parkNanos(long nanos)<br>阻塞当前线程，最长不超过纳秒数，只是在park基础上增加了超时返回时间</li><li>LockSupport.parkUntil(long deadline)<br>也是阻塞当前线程。参数是绝对时间，时间单位为毫秒，是从1970-01-01开始到现在某个时间点换算为毫秒后相减的值</li></ul><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><h4 id="Thread-sleep和Object-wait的异同点"><a href="#Thread-sleep和Object-wait的异同点" class="headerlink" title="Thread.sleep和Object.wait的异同点?"></a>Thread.sleep和Object.wait的异同点?</h4><ul><li><strong>sleep不释放监视器锁，wait释放</strong></li><li>都可以暂停线程执行</li><li>sleep用于暂停执行线程，wait用于线程之间通信和交互</li><li>sleep执行完，线程会被自动唤醒。wait只能使用Object.wait(long)使线程自动被唤醒。否则只能让其他线程调用同一个Object的notify和notifyAll方法唤醒</li></ul><h4 id="notify和notifyALL的异同点"><a href="#notify和notifyALL的异同点" class="headerlink" title="notify和notifyALL的异同点?"></a>notify和notifyALL的异同点?</h4><ul><li>notify唤醒1个线程，notifyAll唤醒所有线程</li><li>notify唤醒哪个线程随机，notifyAll是所有线程参与获取监视器锁的竞争，竞争成功就执行，不成功就等锁下一次被释放，然后继续参与竞争</li></ul><h4 id="为啥要调用Thread-start-开始执行run方法，不能直接调用run么？"><a href="#为啥要调用Thread-start-开始执行run方法，不能直接调用run么？" class="headerlink" title="为啥要调用Thread.start()开始执行run方法，不能直接调用run么？"></a>为啥要调用Thread.start()开始执行run方法，不能直接调用run么？</h4><p>线程启动后，是进入ready状态，虽然从jvm层面看是runnable状态（见前述）。但是它需要在运行前，获取到CPU时间片，做好线程运行的准备。这件事情是由start方法来执行，然后再自动执行run方法，进行真正的操作。直接执行run方法对于Thread来说只是一个普通方法，并不会在线程中执行，这样就不是多线程操作了</p><p>简而言之，start方法会启动线程，并让线程进入ready状态，进行线程操作的准备工作。而run方法只是一个普通方法调用，还是在main主线程执行。另外多嘴一句:<br>start方法只能被调用一次，多次被调用会抛IllegalThreadStateException异常。run可以被重复调用很多次</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>又称Daemon Thread,在java中线程可分为守护线程和应用线程。程序员用自己写的代码创建的线程就是应用线程</p><p>正如它的名字，守护线程是系统的守护者，在后台默默地完成一些系统性的服务，比如垃圾回收线程。而应用线程可认为是系统的工作线程，它会完成这个程序应该要完成的相关操作。如果应用线程全部结束，则意味着这个程序实际上已无事可做。守护线程要守护的对象已经不存在，那么整个应用程序就该结束。因此，当一个java应用只有守护线程时，Java虚拟机就会自然退出</p><p>java类的main方法创建的线程都是main线程的子线程。父线程是守护线程，则子线程也是守护线程。父线程是应用线程（非守护线程），则子线程就是应用线程</p><p>父线程在创建子线程，且启动子线程之前，可用setDaemon(true)方法，将相应的线程设置为守护或应用线程（非守护线程）。如果没有手动设置某线程的优先级，那么该线程的优先级默认值和其父线程相同</p><p>父子线程的生命周期没有必然联系，任何一个线程先结束，都不会影响其父或子线程的生命周期</p><p>守护线程优先级较低，只是用来为系统中其他对象和线程提供服务的</p><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>每个线程都会被分配CPU时间片来执行自身的任务，当某个线程在执行完CPU时间片，切换到另外一个线程前会保存自身状态，以便下次再切换回来时候可以再加载自身状态，这种从保存到再加载过程就被称为一次上下文切换</p><p>上下文切换是计算密集型的，每次切换需要纳秒量级时间，所以对系统来说意味着大量CPU时间的被消耗。而且可能是操作系统中消耗时间最多的操作</p><h2 id="线程优缺点"><a href="#线程优缺点" class="headerlink" title="线程优缺点"></a>线程优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>提高吞吐率</li><li>提高响应速度</li><li>利用多核</li><li>最小化系统资源的使用</li><li>简化程序结构</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>安全问题</li><li>活性问题。死锁、活锁、饥饿</li><li>上下文切换产生的系统时间消耗</li><li>可靠性。单进程多线程，进程死则所有线程都死！</li></ul>    <div id="aplayer-XIFCjYpM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="563622475" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>


    <categories>

      <category>并发编程</category>

    </categories>


    <tags>

      <tag>线程</tag>

    </tags>

  </entry>




</search>
